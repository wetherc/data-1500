#!/usr/bin/env bash

set -euo pipefail

########################################
#        Convenience functions         #
########################################
info () {
  printf "\r[ \033[00;34m..\033[0m ] ${1:-}\n"
}

success () {
  printf "\r\033[2K[ \033[00;32mOK\033[0m ] ${1:-}\n"
}

fail () {
  printf "\r\033[2K[\033[0;31mFAIL\033[0m] ${1:-}\n"
}

check_binary () {
  set +e
  which $1 > /dev/null 2>&1
  bin_status=$?
  if [ $bin_status -eq 0 ]; then
    success "Found binary ${1} in PATH"
  else
    fail "No valid binary for ${1} found in PATH. Please correct your installation"
    exit 1
  fi
  set -e
}

query_psql () {
  PGPASSWORD="password" \
  psql \
    -h "127.0.0.1" \
    -p "5432" \
    -U codio \
    -qtA $(echo "${1:-}")
}

storage__readiness() {
  # Setup checks
  info "Checking for psql binary..."
  check_binary "psql"

  # TODOs
  #   - command line args:
  #     - user
  #     - password
  #     - hostname
  #     - force
  #     - dryrun
  #     - namespace
  # 
  #   - get it out of bash

  #  Test database connection
  info "checking postgres availability"
  pg_isready -d codio -h 127.0.0.1 -p 5432 -U codio &> /dev/null
  success "Connected to postgres!"
}


storage__upgrade() {
  # Enumerate patches
  
  if [ -n "${ZSH_VERSION:-}" ]; then
    SCRIPT_DIR=$( cd -- "$( dirname -- "${(%):-%x}" )" &> /dev/null && pwd -P)
    echo "${SCRIPT_DIR}"
    patches=( "${(@0)$(find "${SCRIPT_DIR}/../data/${1}" -type f -name '*.sql' -print0 | sort -z)}" )
  else
    SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd -P)
    readarray -d '' patches < <(find "${SCRIPT_DIR}/../data/${1}" -type f -name '*.sql' -print0 | sort -z)
  fi

  for patch in "${patches[@]}"; do
    base_name=$(basename "${patch}")

    # The above `find` command will result in an empty string
    # for one of the entries. Rather than caring enough to debug why,
    # I'll just add a check here to skip it whenever we run into it.
    # 
    # That feels like responsible programming
    if [ -z "${base_name}" ]; then
      continue
    fi

    info "Applying patch ${base_name}"
    _now=$(date +%s)
    result=$(query_psql < "${patch}")
    _later=$(date +%s)

    duration=$((${_later} - ${_now}))

    success "Applied patch ${base_name} in ${duration} seconds"
  done

  success "Patches successfully applied"
}

########################################
#          Script Entrypoint           #
########################################

# This is just a loader command that checks to see
# whether the user has supplied a valid subcommand or
# not
storage() {
  storage__readiness

  local cmdname=$1; shift
  if type "storage__$cmdname" >/dev/null 2>&1; then
    "storage__$cmdname" "${1:-}"
  fi
}

storage "$@"